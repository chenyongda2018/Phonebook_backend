{"version":3,"sources":["services/phoneBookService.js","components/notification.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","concat","put","Notification","message","errorMsg","style","color","background","padding","borderStyle","borderRadius","fontSize","marginBottom","PersonList","persons","delPhone","map","person","PersonItem","name","number","onClick","App","useState","setPersons","personValue","setPersonValue","curTel","setCurTel","filter","setFilter","notificationMessage","setNotificationMessage","setErrMsg","personsShow","toLowerCase","includes","useEffect","console","log","PhoneApi","then","response","data","isExist","showNotification","setTimeout","showErrorMsg","errorMessage","onChange","event","target","value","onSubmit","preventDefault","window","confirm","existPerson","find","p","updatePerson","rsp","catch","error","errMsg","type","delPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0fef943.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = \"/api/persons/\";\n\nconst getAll = () => {\n    return axios.get(baseUrl);\n}\n\nconst addNewPhone = (newObject) => {\n    return axios.post(baseUrl,newObject);\n}\n\nconst updatePhone = (id,newObject) => {\n    return axios.put(baseUrl.concat(id),newObject);\n}\n\nconst deletePhone = (id) => {\n    return axios.delete(baseUrl.concat(id));\n}\n\n\nexport default {getAll,addNewPhone,deletePhone,updatePhone}","import React from 'react';\n\nconst Notification = ({message,errorMsg}) => {\n\n    const friendlyStyle =  {\n        color: 'green',\n        background: 'lightgray',\n        padding: 15,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        fontSize: 20,\n        marginBottom: 20\n    }\n\n    const errorStyle = {\n        color: 'red',\n        background: 'lightgray',\n        fontSize: 20,\n        borderStyle: 'solid',\n        padding: 10,\n        marginBottom: 10\n    }\n\n\n    if(message == null && errorMsg == null) {\n        return null;\n    }\n    if(message != null) {\n        return (\n            <div style={friendlyStyle}>\n                {message}\n            </div>\n        );\n    }\n    if(errorMsg != null) {\n        return (\n            <div style={errorStyle}>\n                {errorMsg}\n            </div>\n        );\n    }\n}\n\nexport default Notification;","import React, { useState ,useEffect } from 'react';\nimport PhoneApi from './services/phoneBookService';\nimport Notification from './components/notification';\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [personValue, setPersonValue] = useState('')\n  const [curTel, setCurTel] = useState('')\n  const [filter, setFilter] = useState('')\n\n  const [notificationMessage,setNotificationMessage] = useState(null);\n  const [errorMsg,setErrMsg] = useState(null);\n\n  const personsShow = filter === '' ?\n    persons : persons.filter(person =>\n      person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  const fetchData = () => {\n    console.log('fetchData called');\n    PhoneApi\n      .getAll()\n      .then(response => {\n        console.log('response: ',response.data);\n        setPersons(response.data);\n      });\n  }\n  useEffect(fetchData,[]);\n\n  const handleInputValue = (event) => {\n    setPersonValue(event.target.value);\n  }\n\n  const handleInputTel = (event) => {\n    setCurTel(event.target.value);\n  }\n\n  const handleInputFilter = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const addNewPerson = (event) => {\n    event.preventDefault();\n    \n    //若是已存在用户，则询问是否要替换\n    if (isExist(personValue)) {\n      if(window.confirm(`${personValue} was already added in the PhoneBook,replace the old number with a new one?`)) {\n\n        const existPerson = persons.find(p => p.name === personValue);\n        const updatePerson = {\n          ...existPerson,\n          number: curTel\n        }\n        PhoneApi\n        .updatePhone(existPerson.id,updatePerson)\n        .then(rsp => {\n          console.log('update User: ',rsp.data);\n          showNotification(`Updated ${updatePerson.name}`);\n          //更新集合\n          setPersons(persons.map(p => \n            p.id === existPerson.id ? rsp.data : p));\n        })\n        .catch(error => {\n          showErrorMsg(`Infomation of ${updatePerson.name} has already removed from the server`);\n        });\n      }\n    } else {\n      const newBook = {\n        name: personValue,\n        number: curTel\n      }\n      PhoneApi\n      .addNewPhone(newBook)\n      .then(rsp => {\n        console.log('addNote rsp: ',rsp.data);\n        showNotification(`Added ${personValue}`);\n        setPersons(persons.concat(rsp.data));\n      })\n      .catch(error => {\n        const errMsg = error.response.data;\n        showErrorMsg(errMsg.error);\n        console.log('error:',error.response.data);\n      })\n    }\n    setPersonValue('');\n    setCurTel('');\n  }\n\n  const delPhone = (delPerson) => {\n    if(!window.confirm(`Delete ${delPerson.name} ?`)) return;\n    PhoneApi\n      .deletePhone(delPerson.id)\n      .then(rsp => {\n        console.log('del phone rsp: ',rsp.data);\n      })\n    //更新集合\n    setPersons(persons.filter(p => p.id !== delPerson.id));\n  }\n\n  const isExist = (name) => {\n    for (let person of persons) {\n      if (person.name === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const showNotification = (message) => {\n    setNotificationMessage(message);\n    setTimeout(()=>{\n      setNotificationMessage(null);\n    },5000);\n  }\n\n  const showErrorMsg = (errorMessage) => {\n    setErrMsg(errorMessage);\n    setTimeout(()=>{\n      setErrMsg(null);\n    },5000);\n  }\n\n  return (\n    <div>\n      <h1>Phone book</h1>\n      <Notification\n        message={notificationMessage}\n        errorMsg={errorMsg}/>\n      <div>\n        fliter show with <input onChange={handleInputFilter} />\n      </div>\n      <form onSubmit={addNewPerson}>\n        <h3>Add a new </h3>\n        <div>name: \n          <input value={personValue} onChange={handleInputValue} /></div>\n        <div>Tel: \n          <input value={curTel} onChange={handleInputTel} /></div>\n        <div>\n          <button type=\"submit\">Add</button></div>\n      </form>\n      <PersonList persons={personsShow} delPhone={delPhone}/>\n    </div>\n  )\n}\n\nconst PersonList = ({ persons,delPhone}) => {\n  return (\n    <div>\n      <h3>Numbers</h3>\n      <ul>\n        {persons.map((person, id) =>\n          <li key={id}>\n            <PersonItem person={person} delPhone={()=>{delPhone(person)}}/>\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nconst PersonItem = ({person, delPhone}) => {\n\n  return (\n    <p>\n      {person.name} : {person.number}\n      <button onClick={delPhone}>Delete</button>\n    </p>\n  );\n}\n\n\n\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}